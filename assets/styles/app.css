:root {
    --tile-size: clamp(50px, 18vw, 100px);
}

* {
    box-sizing: border-box;
}

body {
    --cube-x: 0;
    --cube-y: 0;
    --cube-z: 0;
    margin: 0;
    padding: 1rem;
    height: 100vh;
    width: 100%;

    &:hover {
        .cube {
            transition: 0;
        }
    }

}

nav {
    .title {
        font-weight: bold;
        font-size: 1.5rem;
    }

    .logo {
        width: 50px;
        aspect-ratio: 1;
    }
}

.alert {
    padding: 0.5rem;
    border-radius: 8px;
    background-color: rgba(63, 98, 158, 0.5);
    width: fit-content;
}

.cube:has(~ .buttons button:is(.animX, .animXInv, .animY, .animYInv, .animZ, .animZInv)) {
    transition: 1s;
    transform-style: preserve-3d;
    transform-origin: center center calc(var(--tile-size) * -1.5);
}

.cube:has(~ .buttons .animX) {
    --cube-x: 90deg;
    --cube-y: 0;
}

.cube:has(~ .buttons .animXInv) {
    --cube-x: -90deg;
    --cube-y: 0;
}

.cube:has(~ .buttons .animY) {
    --cube-x: 0;
    --cube-y: 90deg;
}

.cube:has(~ .buttons .animYInv) {
    --cube-x: 0;
    --cube-y: -90deg;
}

.cube:has(~ .buttons .animZ) {
    --cube-z: 90deg;
}

.cube:has(~ .buttons .animZInv) {
    --cube-z: -90deg;
}


.container {
    display: grid;
    perspective: 1000px;
    transform-style: preserve-3d;
    grid-template-rows: repeat(3, calc((70vh) / 3));
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-areas:
        "topleft top topright"
        "left center right"
        "bottomleft bottom bottomright"
    ;
    padding: 1rem;
}


button {
    padding: 0.2rem;

    .icon {
        width: 30px;
    }
}


.buttons {

    .reverse {
        scale: -1;
    }

    .reverse-h {
        scale: -1 1;
    }
}

.scene {
    display: grid;
    place-items: center;
    position: relative;
    perspective: 1000px;

    .buttons,
    .cube {
        grid-column: 1/1;
        grid-row: 1/1;
    }

    .buttons {
        --button-distance: var(--tile-size);
        display: grid;
        width: calc(var(--tile-size) * 3);
        height: calc(var(--tile-size) * 3);
        place-items: center;

        .rotate {
            position: absolute;
        }

        .rotate:nth-child(1) {
            top: calc(var(--button-distance) * -1);
        }

        .rotate:nth-child(2) {
            bottom: calc(var(--button-distance) * -1);
        }

        .rotate:nth-child(3) {
            right: calc(var(--button-distance) * -1);
            top: calc(var(--button-distance) * 1);
        }

        .rotate:nth-child(4) {
            left: calc(var(--button-distance) * -1);
            top: calc(var(--button-distance) * 1);
        }

        .rotate:nth-child(5) {
            right: calc(var(--button-distance) * -0.5);
            bottom: calc(var(--button-distance) * -0.5);
        }

        .rotate:nth-child(6) {
            left: calc(var(--button-distance) * -0.5);
            bottom: calc(var(--button-distance) * -0.5);
        }

    }
}



.cube {
    transform: rotateX(var(--cube-x)) rotateY(var(--cube-y)) rotateZ(var(--cube-z));
    transform-style: preserve-3d;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;
    margin: auto;
    width: fit-content;


}

.mix {
    position: absolute;
    top: calc(var(--tile-size) * -1);
    right: calc(var(--tile-size) * -1);
}

/** Surfaces */
.surface {
    width: 100%;

    .surface-left {
        grid-area: left;
    }

    .surface-right {
        grid-area: right;
    }

    .surface-top {
        grid-area: top;
    }

    .surface-center {
        grid-area: center;
    }

    .surface-bottom {
        grid-area: bottom;
    }

    .surface-top-left {
        grid-area: topleft;
    }

    .surface-bottom-left {
        grid-area: bottomleft;
    }

    .surface-top-right {
        grid-area: topright;
    }

    .surface-bottom-right {
        grid-area: bottomright;
    }
}

body {
    --angle: 20deg;


    &:has(.surface-left:hover) {
        --cube-y: calc(var(--angle) * -1);
        ;
    }

    &:has(.surface-right:hover) {
        --cube-y: var(--angle);
    }

    &:has(.surface-top-left:hover) {
        --cube-x: var(--angle);
        --cube-y: calc(var(--angle) * -1);
        ;
    }

    &:has(.surface-top-right:hover) {
        --cube-x: var(--angle);
        --cube-y: var(--angle);
    }

    &:has(.surface-top:hover) {
        --cube-x: var(--angle);
    }

    &:has(.surface-bottom:hover) {
        --cube-x: calc(var(--angle) * -1);
        ;
    }

    &:has(.surface-bottom-left:hover) {
        --cube-x: calc(var(--angle) * -1);
        ;
        --cube-y: calc(var(--angle) * -1);
        ;
    }

    &:has(.surface-bottom-right:hover) {
        --cube-x: calc(var(--angle) * -1);
        ;
        --cube-y: var(--angle);
    }

}


.tile {
    width: var(--tile-size);
    aspect-ratio: 1;
    transform-style: preserve-3d;

    background-color: var(--color);

    &.red {
        --color: red;
    }

    &.yellow {
        --color: yellow;
    }

    &.blue {
        --color: blue;
    }

    &.green {
        --color: green;
    }

    &.white {
        --color: white;
    }

    &.orange {
        --color: orange;
    }

    border: 4px solid rgb(53, 53, 53);
    border-radius: 8px;
}

.face {
    transform-style: preserve-3d;
    grid-column: 1/2;
    grid-row: 1/2;
    display: grid;
    grid-template-columns: repeat(3, var(--tile-size));
    width: fit-content;

    &.face-right {
        transform: rotateY(90deg) translateX(calc(var(--tile-size) * 3));
        transform-origin: right;
    }

    &.face-left {
        transform: rotateY(-90deg) translateX(calc(var(--tile-size) * -3));
        transform-origin: left;
    }

    &.face-bottom {
        transform: rotateX(-90deg) translateY(calc(var(--tile-size) * 3));
        transform-origin: bottom;
    }

    &.face-top {
        transform: rotateX(90deg) translateY(calc(var(--tile-size) * -3));
        transform-origin: top;
    }

    &.face-back {
        transform: rotateX(-180deg) translateZ(calc(var(--tile-size) * 3));
    }

    &.face-front:has(.tile:nth-child(5):hover) {
        transition: opacity 0.5s;
        opacity: 25%;
    }
}

/** Turn Buttons **/
.cube:has(button.animTurn) .tile,
.cube:has(button.animTurn) .face {
    transition: 1s;
}

.cube:has(button.turnFrontToRight) .face-front {
    transform: rotateZ(90deg);
}

.cube:has(button.turnFrontToLeft) .face-front {
    transform: rotateZ(-90deg);
}

.cube:has(.turnTopToRight, .turnTopToLeft, .turnBottomToRight, .turnBottomToLeft, .turnRightToTop, .turnRightToBottom, .turnLeftToTop, .turnLeftToBottom) {
    --rotate: 90deg;

    &:has(.turnTopToLeft, .turnBottomToLeft, .turnRightToBottom, .turnLeftToBottom) {
        --rotate: -90deg;
    }

    &:has(.turnTopToRight, .turnTopToLeft) {
        .face-front,
        .face-right,
        .face-left {
            .tile:is(:nth-child(1)) {
                transform: rotateY(var(--rotate));
                transform-origin: calc(var(--tile-size) * 1.5) center calc(var(--tile-size) * -1.5);
            }

            .tile:is(:nth-child(2)) {
                transform: rotateY(var(--rotate));
                transform-origin: calc(var(--tile-size) * 0.5) center calc(var(--tile-size) * -1.5);
            }

            .tile:is(:nth-child(3)) {
                transform: rotateY(var(--rotate));
                transform-origin: calc(var(--tile-size) * -0.5) center calc(var(--tile-size) * -1.5);
            }
        }
    }

    &:has(.turnBottomToRight, .turnBottomToLeft) {

        .face-front,
        .face-right,
        .face-left {
            .tile:is(:nth-child(7)) {
                transform: rotateY(var(--rotate));
                transform-origin: calc(var(--tile-size) * 1.5) center calc(var(--tile-size) * -1.5);
            }

            .tile:is(:nth-child(8)) {
                transform: rotateY(var(--rotate));
                transform-origin: calc(var(--tile-size) * 0.5) center calc(var(--tile-size) * -1.5);
            }

            .tile:is(:nth-child(9)) {
                transform: rotateY(var(--rotate));
                transform-origin: calc(var(--tile-size) * -0.5) center calc(var(--tile-size) * -1.5);
            }
        }
    }

    &:has(.turnRightToTop, .turnRightToBottom) {

        .face-front,
        .face-bottom,
        .face-top {
            .tile:is(:nth-child(3)) {
                transform: rotateX(var(--rotate));
                transform-origin:center calc(var(--tile-size) * 1.5)  calc(var(--tile-size) * -1.5);
            }

            .tile:is(:nth-child(6)) {
                transform: rotateX(var(--rotate));
                transform-origin:center calc(var(--tile-size) * 0.5)  calc(var(--tile-size) * -1.5);
            }

            .tile:is(:nth-child(9)) {
                transform: rotateX(var(--rotate));
                transform-origin:center calc(var(--tile-size) * -0.5)  calc(var(--tile-size) * -1.5);
            }
        }
    }

    &:has(.turnLeftToTop, .turnLeftToBottom) {
        .face-front,
        .face-bottom,
        .face-top {
            .tile:is(:nth-child(1)) {
                transform: rotateX(var(--rotate));
                transform-origin:center calc(var(--tile-size) * 1.5)  calc(var(--tile-size) * -1.5);
            }

            .tile:is(:nth-child(4)) {
                transform: rotateX(var(--rotate));
                transform-origin:center calc(var(--tile-size) * 0.5)  calc(var(--tile-size) * -1.5);
            }

            .tile:is(:nth-child(7)) {
                transform: rotateX(var(--rotate));
                transform-origin:center calc(var(--tile-size) * -0.5)  calc(var(--tile-size) * -1.5);
            }
        }
    }
}




.cube button {
    display: none;
}

.face-front:has(.tile:nth-child(1):hover)~.topToLeftButton,
.topToLeftButton:hover {
    display: flex;
    animation: fade 0.2s;
    position: absolute;
    top: calc(var(--tile-size) / 4);
    left: 0;
}

.face-front:has(.tile:nth-child(1):hover)~.leftToTopButton,
.leftToTopButton:hover {
    display: flex;
    animation: fade 0.2s;
    position: absolute;
    left: calc(var(--tile-size) / 4);
    top: 0;
}

.face-front:has(.tile:nth-child(3):hover)~.topToRightButton,
.topToRightButton:hover {
    display: flex;
    animation: fade 0.2s;
    position: absolute;
    top: calc(var(--tile-size) / 4);
    right: 0;
}

.face-front:has(.tile:nth-child(3):hover)~.rightToTopButton,
.rightToTopButton:hover {
    display: flex;
    animation: fade 0.2s;
    position: absolute;
    right: calc(var(--tile-size) / 4);
    top: 0;
}

.face-front:has(.tile:nth-child(9):hover)~.bottomToRightButton,
.bottomToRightButton:hover {
    display: flex;
    animation: fade 0.2s;
    position: absolute;
    bottom: calc(var(--tile-size) / 4);
    right: 0;
}

.face-front:has(.tile:nth-child(9):hover)~.rightToBottomButton,
.rightToBottomButton:hover {
    display: flex;
    animation: fade 0.2s;
    position: absolute;
    right: calc(var(--tile-size) / 4);
    bottom: 0;
}

.face-front:has(.tile:nth-child(7):hover)~.bottomToLeftButton,
.bottomToLeftButton:hover {
    display: flex;
    animation: fade 0.2s;
    position: absolute;
    bottom: calc(var(--tile-size) / 4);
    left: 0;
}

.face-front:has(.tile:nth-child(7):hover)~.leftToBottomButton,
.leftToBottomButton:hover {
    display: flex;
    animation: fade 0.2s;
    position: absolute;
    left: calc(var(--tile-size) / 4);
    bottom: 0;
}

.face-front:has(.tile:nth-child(2):hover)~.frontToLeftButton,
.frontToLeftButton:hover {
    display: flex;
    animation: fade 0.2s;
    position: absolute;
    left: calc(var(--tile-size));
    top: calc(var(--tile-size) / 4);
}

.face-front:has(.tile:nth-child(2):hover)~.frontToRightButton,
.frontToRightButton:hover {
    display: flex;
    animation: fade 0.2s;
    position: absolute;
    right: calc(var(--tile-size));
    top: calc(var(--tile-size) / 4);
}

@keyframes fade {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;

    }
}